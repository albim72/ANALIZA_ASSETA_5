# -*- coding: utf-8 -*-
"""sautolegend.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m_fio-UHjBhsIZlWfSEDTCkCnV1mVVx0
"""

!pip install faker

import pandas as pd
import numpy as np
from datetime import datetime
from faker import Faker
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import layers, models

# Dane
fake = Faker()
np.random.seed(42)
n_customers = 1000
transactions = []

for i in range(n_customers):
    customer_id = i + 1
    for _ in range(np.random.randint(1, 10)):
        transactions.append([
            customer_id,
            fake.date_between(start_date='-365d', end_date='today'),
            round(np.random.exponential(scale=120), 2)
        ])

df = pd.DataFrame(transactions, columns=['CustomerID', 'InvoiceDate', 'Amount'])
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])
now = datetime(2025, 5, 1)

# RFM
rfm = df.groupby('CustomerID').agg({
    'InvoiceDate': lambda x: (now - x.max()).days,
    'CustomerID': 'count',
    'Amount': 'sum'
}).rename(columns={'InvoiceDate': 'Recency', 'CustomerID': 'Frequency', 'Amount': 'Monetary'})

# Skalowanie
X_scaled = StandardScaler().fit_transform(rfm)

# Autoencoder
input_layer = layers.Input(shape=(3,))
encoded = layers.Dense(10, activation='relu')(input_layer)
encoded = layers.Dense(2, activation='relu')(encoded)
decoded = layers.Dense(10, activation='relu')(encoded)
decoded = layers.Dense(3, activation='linear')(decoded)

autoencoder = models.Model(input_layer, decoded)
encoder = models.Model(input_layer, encoded)
autoencoder.compile(optimizer='adam', loss='mse')
autoencoder.fit(X_scaled, X_scaled, epochs=100, batch_size=32, verbose=0)

# Kodowanie + KMeans
X_encoded = encoder.predict(X_scaled)
clusters = KMeans(n_clusters=3, random_state=42, n_init=10).fit_predict(X_encoded)

# Wizualizacja z kolorami
rfm['Encoded_X'] = X_encoded[:, 0]
rfm['Encoded_Y'] = X_encoded[:, 1]
rfm['Cluster'] = clusters

colors = ['red', 'green', 'blue']
plt.figure(figsize=(8, 6))
for cluster_id in sorted(rfm['Cluster'].unique()):
    plt.scatter(
        rfm[rfm['Cluster'] == cluster_id]['Encoded_X'],
        rfm[rfm['Cluster'] == cluster_id]['Encoded_Y'],
        label=f'Cluster {cluster_id}',
        c=colors[cluster_id],
        alpha=0.6
    )

plt.xlabel("Encoded Dimension 1")
plt.ylabel("Encoded Dimension 2")
plt.title("Segmentacja klientów (Autoencoder + KMeans)")
plt.legend()
plt.grid(True)
plt.show()

fake = Faker('pl_PL')  # dla polskich danych

print(fake.name())        # np. "Andrzej Malinowski"
print(fake.email())       # np. "a.malinowski@example.com"
print(fake.date())        # np. "2024-10-05"
print(fake.address())     # np. "ul. Kwiatowa 7, 01-123 Warszawa"
print(fake.company())     # np. "Zakład Przetwórstwa Mięsnego"