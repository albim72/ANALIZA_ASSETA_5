# -*- coding: utf-8 -*-
"""seg_tfm_kmeans.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Q1GXF23p4vnSFycjPgtZRvAMVSWl6ns
"""

import pandas as pd
import numpy as np
from datetime import datetime
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# Przykładowe dane transakcyjne
data = {
    'CustomerID': [1, 2, 3, 4, 5],
    'InvoiceDate': ['2023-12-01', '2024-01-10', '2024-03-20', '2024-04-01', '2024-04-20'],
    'Amount': [250, 100, 400, 130, 80]
}

df = pd.DataFrame(data)
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])

# Data dzisiejsza
now = datetime(2025, 5, 1)

# Liczymy dla każdego klienta:
#     Recency – liczba dni od ostatniego zakupu
#     Frequency – liczba zakupów
#     Monetary – suma wydatków
# Grupowanie po kliencie
rfm = df.groupby('CustomerID').agg({
    'InvoiceDate': lambda x: (now - x.max()).days,  # Recency
    'CustomerID': 'count',                         # Frequency
    'Amount': 'sum'                                # Monetary
}).rename(columns={
    'InvoiceDate': 'Recency',
    'CustomerID': 'Frequency',
    'Amount': 'Monetary'
})

# Standaryzacja
scaler = StandardScaler()
rfm_scaled = scaler.fit_transform(rfm)

# KMeans - 3 segmenty
kmeans = KMeans(n_clusters=3, random_state=42)
rfm['Cluster'] = kmeans.fit_predict(rfm_scaled)

# Wizualizacja
sns.pairplot(rfm.reset_index(), hue='Cluster', vars=['Recency', 'Frequency', 'Monetary'])
plt.suptitle("Segmentacja klientów RFM + KMeans", y=1.02)
plt.show()

# Podgląd wyników
print(rfm)